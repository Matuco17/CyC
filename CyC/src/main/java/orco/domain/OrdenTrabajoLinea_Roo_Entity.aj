// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package orco.domain;

import java.lang.Long;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import orco.domain.OrdenTrabajoLinea;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OrdenTrabajoLinea_Roo_Entity {
    
    declare @type: OrdenTrabajoLinea: @Entity;
    
    @PersistenceContext
    transient EntityManager OrdenTrabajoLinea.entityManager;
    
    @Transactional
    public void OrdenTrabajoLinea.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void OrdenTrabajoLinea.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            OrdenTrabajoLinea attached = this.entityManager.find(this.getClass(), this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void OrdenTrabajoLinea.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public OrdenTrabajoLinea OrdenTrabajoLinea.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OrdenTrabajoLinea merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager OrdenTrabajoLinea.entityManager() {
        EntityManager em = new OrdenTrabajoLinea().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long OrdenTrabajoLinea.countOrdenTrabajoLineas() {
        return entityManager().createQuery("select count(o) from OrdenTrabajoLinea o", Long.class).getSingleResult();
    }
    
    public static List<OrdenTrabajoLinea> OrdenTrabajoLinea.findAllOrdenTrabajoLineas() {
        return entityManager().createQuery("select o from OrdenTrabajoLinea o", OrdenTrabajoLinea.class).getResultList();
    }
    
    public static OrdenTrabajoLinea OrdenTrabajoLinea.findOrdenTrabajoLinea(Long id) {
        if (id == null) return null;
        return entityManager().find(OrdenTrabajoLinea.class, id);
    }
    
    public static List<OrdenTrabajoLinea> OrdenTrabajoLinea.findOrdenTrabajoLineaEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from OrdenTrabajoLinea o", OrdenTrabajoLinea.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
