// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package orco.web;

import java.lang.Long;
import java.lang.String;
import orco.domain.Responsable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect ResponsableController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ResponsableController.conversionService;
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ResponsableController.createForm(Model model) {
        model.addAttribute("responsable", new Responsable());
        return "responsables/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ResponsableController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("responsable", Responsable.findResponsable(id));
        model.addAttribute("itemId", id);
        return "responsables/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ResponsableController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("responsables", Responsable.findResponsableEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Responsable.countResponsables() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("responsables", Responsable.findAllResponsables());
        }
        return "responsables/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ResponsableController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("responsable", Responsable.findResponsable(id));
        return "responsables/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ResponsableController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Responsable.findResponsable(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/responsables?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByUsername", "form" }, method = RequestMethod.GET)
    public String ResponsableController.findResponsablesByUsernameForm(Model model) {
        return "responsables/findResponsablesByUsername";
    }
    
    @RequestMapping(params = "find=ByUsername", method = RequestMethod.GET)
    public String ResponsableController.findResponsablesByUsername(@RequestParam("username") String username, Model model) {
        model.addAttribute("responsables", Responsable.findResponsablesByUsername(username).getResultList());
        return "responsables/list";
    }
    
 
}
